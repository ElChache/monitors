{"version":3,"file":"historical_service-CeqSZnBH.js","sources":["../../../.svelte-kit/adapter-node/chunks/historical_service.js"],"sourcesContent":["import { db } from \"./db.js\";\nimport { f as monitorEvaluations } from \"./users.js\";\nimport { eq, gte, lte, count, and, desc, asc, avg, sql } from \"drizzle-orm\";\nclass HistoricalDataService {\n  /**\n   * Get historical data for a monitor\n   */\n  static async getMonitorHistory(monitorId, options = {}) {\n    const {\n      startDate,\n      endDate,\n      limit = 100,\n      offset = 0,\n      sortOrder = \"desc\",\n      aggregation = \"none\",\n      includeStats = false\n    } = options;\n    try {\n      const conditions = [eq(monitorEvaluations.monitorId, monitorId)];\n      if (startDate) {\n        conditions.push(gte(monitorEvaluations.evaluatedAt, startDate));\n      }\n      if (endDate) {\n        conditions.push(lte(monitorEvaluations.evaluatedAt, endDate));\n      }\n      const [{ total }] = await db.select({ total: count() }).from(monitorEvaluations).where(and(...conditions));\n      let data = [];\n      if (aggregation === \"none\") {\n        const query = db.select({\n          id: monitorEvaluations.id,\n          timestamp: monitorEvaluations.evaluatedAt,\n          currentValue: monitorEvaluations.currentValue,\n          triggered: monitorEvaluations.triggered,\n          processingTime: monitorEvaluations.processingTime\n        }).from(monitorEvaluations).where(and(...conditions)).limit(limit).offset(offset);\n        if (sortOrder === \"desc\") {\n          query.orderBy(desc(monitorEvaluations.evaluatedAt));\n        } else {\n          query.orderBy(asc(monitorEvaluations.evaluatedAt));\n        }\n        const results = await query;\n        data = results.map((row) => ({\n          timestamp: row.timestamp,\n          value: row.currentValue,\n          triggered: row.triggered,\n          processingTime: row.processingTime || 0,\n          evaluationId: row.id\n        }));\n      } else {\n        data = await this.getAggregatedData(monitorId, aggregation, conditions, sortOrder);\n      }\n      let stats;\n      if (includeStats) {\n        stats = await this.calculateStats(monitorId, conditions);\n      }\n      return {\n        data,\n        stats,\n        pagination: {\n          total,\n          limit,\n          offset,\n          hasMore: offset + limit < total\n        }\n      };\n    } catch (error) {\n      console.error(\"Historical data retrieval error:\", error);\n      throw new Error(\"Failed to retrieve historical data\");\n    }\n  }\n  /**\n   * Get aggregated historical data\n   */\n  static async getAggregatedData(monitorId, aggregation, conditions, sortOrder) {\n    let interval;\n    switch (aggregation) {\n      case \"hourly\":\n        interval = \"1 hour\";\n        break;\n      case \"daily\":\n        interval = \"1 day\";\n        break;\n      case \"weekly\":\n        interval = \"1 week\";\n        break;\n      default:\n        throw new Error(\"Invalid aggregation type\");\n    }\n    const query = db.select({\n      timestamp: sql`date_trunc(${interval}, ${monitorEvaluations.evaluatedAt})`.as(\"timestamp\"),\n      count: count().as(\"count\"),\n      avgProcessingTime: avg(monitorEvaluations.processingTime).as(\"avgProcessingTime\"),\n      triggeredCount: sql`SUM(CASE WHEN ${monitorEvaluations.triggered} THEN 1 ELSE 0 END)`.as(\"triggeredCount\"),\n      // Note: min/max on currentValue would need proper handling based on data type\n      minValue: sql`MIN(${monitorEvaluations.currentValue})`.as(\"minValue\"),\n      maxValue: sql`MAX(${monitorEvaluations.currentValue})`.as(\"maxValue\"),\n      avgValue: sql`AVG(CASE WHEN ${monitorEvaluations.currentValue}::text ~ '^[0-9.]+$' THEN ${monitorEvaluations.currentValue}::numeric ELSE NULL END)`.as(\"avgValue\")\n    }).from(monitorEvaluations).where(and(...conditions)).groupBy(sql`date_trunc(${interval}, ${monitorEvaluations.evaluatedAt})`);\n    if (sortOrder === \"desc\") {\n      query.orderBy(desc(sql`date_trunc(${interval}, ${monitorEvaluations.evaluatedAt})`));\n    } else {\n      query.orderBy(asc(sql`date_trunc(${interval}, ${monitorEvaluations.evaluatedAt})`));\n    }\n    const results = await query;\n    return results.map((row) => ({\n      timestamp: row.timestamp,\n      count: row.count,\n      avgValue: row.avgValue,\n      minValue: row.minValue,\n      maxValue: row.maxValue,\n      triggeredCount: row.triggeredCount,\n      avgProcessingTime: row.avgProcessingTime || 0\n    }));\n  }\n  /**\n   * Calculate historical statistics\n   */\n  static async calculateStats(monitorId, conditions) {\n    const [statsResult] = await db.select({\n      totalEvaluations: count().as(\"totalEvaluations\"),\n      totalTriggered: sql`SUM(CASE WHEN ${monitorEvaluations.triggered} THEN 1 ELSE 0 END)`.as(\"totalTriggered\"),\n      avgProcessingTime: avg(monitorEvaluations.processingTime).as(\"avgProcessingTime\"),\n      minValue: sql`MIN(${monitorEvaluations.currentValue})`.as(\"minValue\"),\n      maxValue: sql`MAX(${monitorEvaluations.currentValue})`.as(\"maxValue\"),\n      minDate: sql`MIN(${monitorEvaluations.evaluatedAt})`.as(\"minDate\"),\n      maxDate: sql`MAX(${monitorEvaluations.evaluatedAt})`.as(\"maxDate\")\n    }).from(monitorEvaluations).where(and(...conditions));\n    const triggerRate = statsResult.totalEvaluations > 0 ? statsResult.totalTriggered / statsResult.totalEvaluations * 100 : 0;\n    return {\n      totalEvaluations: statsResult.totalEvaluations,\n      totalTriggered: statsResult.totalTriggered,\n      triggerRate: Math.round(triggerRate * 100) / 100,\n      avgProcessingTime: statsResult.avgProcessingTime || 0,\n      minValue: statsResult.minValue,\n      maxValue: statsResult.maxValue,\n      dateRange: {\n        start: statsResult.minDate || /* @__PURE__ */ new Date(),\n        end: statsResult.maxDate || /* @__PURE__ */ new Date()\n      }\n    };\n  }\n  /**\n   * Export historical data to CSV format\n   */\n  static async exportToCSV(monitorId, options = {}) {\n    const { data } = await this.getMonitorHistory(monitorId, {\n      ...options,\n      limit: 1e4,\n      // Large limit for export\n      aggregation: \"none\"\n      // Always export raw data\n    });\n    if (!Array.isArray(data) || data.length === 0) {\n      return \"timestamp,value,triggered,processingTime\\n\";\n    }\n    const headers = \"timestamp,value,triggered,processingTime,evaluationId\\n\";\n    const rows = data.map((point) => {\n      const timestamp = point.timestamp.toISOString();\n      const value = typeof point.value === \"object\" ? JSON.stringify(point.value) : point.value;\n      const triggered = point.triggered ? \"true\" : \"false\";\n      const processingTime = point.processingTime;\n      const evaluationId = point.evaluationId;\n      return `${timestamp},\"${value}\",${triggered},${processingTime},${evaluationId}`;\n    }).join(\"\\n\");\n    return headers + rows;\n  }\n  /**\n   * Export historical data to JSON format\n   */\n  static async exportToJSON(monitorId, options = {}) {\n    const result = await this.getMonitorHistory(monitorId, {\n      ...options,\n      limit: 1e4,\n      // Large limit for export\n      includeStats: true\n    });\n    return {\n      monitorId,\n      exportedAt: (/* @__PURE__ */ new Date()).toISOString(),\n      options,\n      ...result\n    };\n  }\n  /**\n   * Get data for chart visualization\n   */\n  static async getChartData(monitorId, timeRange = \"24h\", aggregation = \"hourly\") {\n    const now = /* @__PURE__ */ new Date();\n    let startDate;\n    let chartAggregation = aggregation;\n    switch (timeRange) {\n      case \"1h\":\n        startDate = new Date(now.getTime() - 60 * 60 * 1e3);\n        chartAggregation = \"none\";\n        break;\n      case \"24h\":\n        startDate = new Date(now.getTime() - 24 * 60 * 60 * 1e3);\n        chartAggregation = \"hourly\";\n        break;\n      case \"7d\":\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1e3);\n        chartAggregation = \"daily\";\n        break;\n      case \"30d\":\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1e3);\n        chartAggregation = \"daily\";\n        break;\n      case \"90d\":\n        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1e3);\n        chartAggregation = \"weekly\";\n        break;\n    }\n    const { data } = await this.getMonitorHistory(monitorId, {\n      startDate,\n      endDate: now,\n      aggregation: chartAggregation,\n      sortOrder: \"asc\",\n      limit: 1e3\n    });\n    if (chartAggregation === \"none\") {\n      const points = data;\n      return {\n        labels: points.map((p) => p.timestamp.toISOString()),\n        datasets: [\n          {\n            label: \"Triggered\",\n            data: points.map((p) => p.triggered ? 1 : 0),\n            backgroundColor: \"rgba(239, 68, 68, 0.5)\",\n            borderColor: \"rgb(239, 68, 68)\"\n          },\n          {\n            label: \"Processing Time (ms)\",\n            data: points.map((p) => p.processingTime),\n            backgroundColor: \"rgba(59, 130, 246, 0.5)\",\n            borderColor: \"rgb(59, 130, 246)\"\n          }\n        ]\n      };\n    } else {\n      const aggregatedPoints = data;\n      return {\n        labels: aggregatedPoints.map((p) => p.timestamp.toISOString()),\n        datasets: [\n          {\n            label: \"Evaluation Count\",\n            data: aggregatedPoints.map((p) => p.count),\n            backgroundColor: \"rgba(34, 197, 94, 0.5)\",\n            borderColor: \"rgb(34, 197, 94)\"\n          },\n          {\n            label: \"Triggered Count\",\n            data: aggregatedPoints.map((p) => p.triggeredCount),\n            backgroundColor: \"rgba(239, 68, 68, 0.5)\",\n            borderColor: \"rgb(239, 68, 68)\"\n          },\n          {\n            label: \"Avg Processing Time (ms)\",\n            data: aggregatedPoints.map((p) => p.avgProcessingTime),\n            backgroundColor: \"rgba(59, 130, 246, 0.5)\",\n            borderColor: \"rgb(59, 130, 246)\"\n          }\n        ]\n      };\n    }\n  }\n}\nexport {\n  HistoricalDataService as H\n};\n"],"names":[],"mappings":"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"}