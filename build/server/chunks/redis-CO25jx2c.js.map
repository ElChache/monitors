{"version":3,"file":"redis-CO25jx2c.js","sources":["../../../.svelte-kit/adapter-node/chunks/redis.js"],"sourcesContent":["import Redis from \"ioredis\";\nimport { config } from \"dotenv\";\nconfig();\nconst redisConfig = {\n  host: process.env.REDIS_HOST || \"localhost\",\n  port: parseInt(process.env.REDIS_PORT || \"6379\"),\n  password: process.env.REDIS_PASSWORD || void 0,\n  db: parseInt(process.env.REDIS_DB || \"0\"),\n  retryDelayOnFailover: 100,\n  retryDelayOnClusterDown: 300,\n  maxRetriesPerRequest: 3,\n  lazyConnect: true,\n  keepAlive: 3e4,\n  family: 4,\n  // IPv4\n  connectTimeout: 1e4,\n  commandTimeout: 5e3\n};\nlet redisClient = null;\nasync function initializeRedis() {\n  if (!redisClient) {\n    redisClient = new Redis(redisConfig);\n    new Redis(redisConfig);\n    new Redis(redisConfig);\n    redisClient.on(\"connect\", () => {\n      console.log(\"Redis client connected\");\n    });\n    redisClient.on(\"error\", (error) => {\n      console.error(\"Redis client error:\", error);\n    });\n    redisClient.on(\"close\", () => {\n      console.log(\"Redis client connection closed\");\n    });\n    await redisClient.connect();\n  }\n}\nasync function getRedisClient() {\n  if (!redisClient) {\n    await initializeRedis();\n  }\n  return redisClient;\n}\nclass RedisCache {\n  client;\n  prefix;\n  constructor(client, prefix = \"monitors:\") {\n    this.client = client;\n    this.prefix = prefix;\n  }\n  /**\n   * Generate cache key with prefix\n   */\n  key(key) {\n    return `${this.prefix}${key}`;\n  }\n  /**\n   * Set value with optional TTL\n   */\n  async set(key, value, ttlSeconds) {\n    try {\n      const serialized = JSON.stringify(value);\n      if (ttlSeconds) {\n        await this.client.setex(this.key(key), ttlSeconds, serialized);\n      } else {\n        await this.client.set(this.key(key), serialized);\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Redis set error:\", error);\n      return false;\n    }\n  }\n  /**\n   * Get value and deserialize\n   */\n  async get(key) {\n    try {\n      const value = await this.client.get(this.key(key));\n      if (value === null) {\n        return null;\n      }\n      return JSON.parse(value);\n    } catch (error) {\n      console.error(\"Redis get error:\", error);\n      return null;\n    }\n  }\n  /**\n   * Delete key\n   */\n  async del(key) {\n    try {\n      const result = await this.client.del(this.key(key));\n      return result > 0;\n    } catch (error) {\n      console.error(\"Redis del error:\", error);\n      return false;\n    }\n  }\n  /**\n   * Check if key exists\n   */\n  async exists(key) {\n    try {\n      const result = await this.client.exists(this.key(key));\n      return result === 1;\n    } catch (error) {\n      console.error(\"Redis exists error:\", error);\n      return false;\n    }\n  }\n  /**\n   * Set TTL for existing key\n   */\n  async expire(key, ttlSeconds) {\n    try {\n      const result = await this.client.expire(this.key(key), ttlSeconds);\n      return result === 1;\n    } catch (error) {\n      console.error(\"Redis expire error:\", error);\n      return false;\n    }\n  }\n  /**\n   * Get TTL for key\n   */\n  async ttl(key) {\n    try {\n      return await this.client.ttl(this.key(key));\n    } catch (error) {\n      console.error(\"Redis ttl error:\", error);\n      return -1;\n    }\n  }\n  /**\n   * Increment numeric value\n   */\n  async incr(key) {\n    try {\n      return await this.client.incr(this.key(key));\n    } catch (error) {\n      console.error(\"Redis incr error:\", error);\n      return 0;\n    }\n  }\n  /**\n   * Decrement numeric value\n   */\n  async decr(key) {\n    try {\n      return await this.client.decr(this.key(key));\n    } catch (error) {\n      console.error(\"Redis decr error:\", error);\n      return 0;\n    }\n  }\n  /**\n   * Set multiple key-value pairs\n   */\n  async mset(pairs, ttlSeconds) {\n    try {\n      const pipeline = this.client.pipeline();\n      for (const [key, value] of Object.entries(pairs)) {\n        const serialized = JSON.stringify(value);\n        const cacheKey = this.key(key);\n        if (ttlSeconds) {\n          pipeline.setex(cacheKey, ttlSeconds, serialized);\n        } else {\n          pipeline.set(cacheKey, serialized);\n        }\n      }\n      await pipeline.exec();\n      return true;\n    } catch (error) {\n      console.error(\"Redis mset error:\", error);\n      return false;\n    }\n  }\n  /**\n   * Get multiple values\n   */\n  async mget(keys) {\n    try {\n      const cacheKeys = keys.map((key) => this.key(key));\n      const values = await this.client.mget(...cacheKeys);\n      const result = {};\n      keys.forEach((key, index) => {\n        const value = values[index];\n        result[key] = value ? JSON.parse(value) : null;\n      });\n      return result;\n    } catch (error) {\n      console.error(\"Redis mget error:\", error);\n      return {};\n    }\n  }\n  /**\n   * Delete multiple keys\n   */\n  async mdel(keys) {\n    try {\n      const cacheKeys = keys.map((key) => this.key(key));\n      return await this.client.del(...cacheKeys);\n    } catch (error) {\n      console.error(\"Redis mdel error:\", error);\n      return 0;\n    }\n  }\n  /**\n   * Delete all keys matching pattern\n   */\n  async delPattern(pattern) {\n    try {\n      const keys = await this.client.keys(this.key(pattern));\n      if (keys.length === 0) {\n        return 0;\n      }\n      return await this.client.del(...keys);\n    } catch (error) {\n      console.error(\"Redis delPattern error:\", error);\n      return 0;\n    }\n  }\n  /**\n   * Get cache statistics\n   */\n  async getStats() {\n    try {\n      const keyCount = await this.client.dbsize();\n      const info = await this.client.memory(\"usage\");\n      return {\n        keyCount,\n        memoryUsage: `${Math.round(info / 1024 / 1024 * 100) / 100} MB`\n      };\n    } catch (error) {\n      console.error(\"Redis getStats error:\", error);\n      return {\n        keyCount: 0,\n        memoryUsage: \"0 MB\"\n      };\n    }\n  }\n}\nasync function testRedisConnection() {\n  try {\n    const client = await getRedisClient();\n    await client.ping();\n    return true;\n  } catch (error) {\n    console.error(\"Redis connection test failed:\", error);\n    return false;\n  }\n}\nexport {\n  RedisCache as R,\n  getRedisClient as g,\n  testRedisConnection as t\n};\n"],"names":[],"mappings":"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"}