{"version":3,"file":"service-BeZtpnt3.js","sources":["../../../.svelte-kit/adapter-node/chunks/service.js"],"sourcesContent":["import { db } from \"./db.js\";\nimport { u as users, m as monitors, s as sessions } from \"./users.js\";\nimport { eq, count, and, desc, gte } from \"drizzle-orm\";\nimport \"./service2.js\";\nclass AdminService {\n  /**\n   * Check if user has admin privileges\n   */\n  static async isAdmin(userId) {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, userId)).limit(1);\n      return user?.isAdmin || false;\n    } catch (error) {\n      console.error(\"Admin check error:\", error);\n      return false;\n    }\n  }\n  /**\n   * Get paginated list of users for admin management\n   */\n  static async getUsers(options = {}) {\n    const {\n      page = 1,\n      limit = 50,\n      search,\n      role,\n      status,\n      sortBy = \"createdAt\",\n      sortOrder = \"desc\"\n    } = options;\n    try {\n      const offset = (page - 1) * limit;\n      const conditions = [];\n      if (search) {\n        conditions.push(\n          // Note: In a real implementation, you'd use proper text search\n          // This is a simplified version for demo\n        );\n      }\n      if (role === \"admin\") {\n        conditions.push(eq(users.isAdmin, true));\n      } else if (role === \"user\") {\n        conditions.push(eq(users.isAdmin, false));\n      }\n      if (status === \"active\") {\n        conditions.push(eq(users.isActive, true));\n      } else if (status === \"inactive\") {\n        conditions.push(eq(users.isActive, false));\n      }\n      const userQuery = db.select({\n        id: users.id,\n        email: users.email,\n        name: users.name,\n        isAdmin: users.isAdmin,\n        isActive: users.isActive,\n        emailVerified: users.emailVerified,\n        isBetaUser: users.isBetaUser,\n        createdAt: users.createdAt,\n        lastLoginAt: users.lastLoginAt,\n        monitorCount: count(monitors.id)\n      }).from(users).leftJoin(monitors, eq(users.id, monitors.userId)).groupBy(users.id);\n      if (conditions.length > 0) {\n        userQuery.where(and(...conditions));\n      }\n      if (sortBy === \"createdAt\") {\n        userQuery.orderBy(sortOrder === \"desc\" ? desc(users.createdAt) : users.createdAt);\n      } else if (sortBy === \"name\") {\n        userQuery.orderBy(sortOrder === \"desc\" ? desc(users.name) : users.name);\n      } else if (sortBy === \"email\") {\n        userQuery.orderBy(sortOrder === \"desc\" ? desc(users.email) : users.email);\n      }\n      const [userResults, [{ total }]] = await Promise.all([\n        userQuery.limit(limit).offset(offset),\n        db.select({ total: count() }).from(users)\n      ]);\n      const adminUsers = userResults.map((user) => ({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.isAdmin ? \"admin\" : \"user\",\n        isActive: user.isActive,\n        emailVerified: user.emailVerified,\n        isBetaUser: user.isBetaUser,\n        createdAt: user.createdAt,\n        lastLoginAt: user.lastLoginAt,\n        monitorCount: user.monitorCount || 0\n      }));\n      return {\n        users: adminUsers,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n      };\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      throw new Error(\"Failed to retrieve users\");\n    }\n  }\n  /**\n   * Update user role (admin/user)\n   */\n  static async updateUserRole(userId, isAdmin) {\n    try {\n      await db.update(users).set({ isAdmin, updatedAt: /* @__PURE__ */ new Date() }).where(eq(users.id, userId));\n    } catch (error) {\n      console.error(\"Update user role error:\", error);\n      throw new Error(\"Failed to update user role\");\n    }\n  }\n  /**\n   * Update user status (active/inactive)\n   */\n  static async updateUserStatus(userId, isActive) {\n    try {\n      await db.update(users).set({ isActive, updatedAt: /* @__PURE__ */ new Date() }).where(eq(users.id, userId));\n    } catch (error) {\n      console.error(\"Update user status error:\", error);\n      throw new Error(\"Failed to update user status\");\n    }\n  }\n  /**\n   * Delete user and all associated data\n   */\n  static async deleteUser(userId) {\n    try {\n      await db.delete(monitors).where(eq(monitors.userId, userId));\n      await db.delete(sessions).where(eq(sessions.userId, userId));\n      await db.delete(users).where(eq(users.id, userId));\n    } catch (error) {\n      console.error(\"Delete user error:\", error);\n      throw new Error(\"Failed to delete user\");\n    }\n  }\n  /**\n   * Get system statistics\n   */\n  static async getSystemStats() {\n    try {\n      const today = /* @__PURE__ */ new Date();\n      today.setHours(0, 0, 0, 0);\n      const weekAgo = /* @__PURE__ */ new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      const [\n        [{ totalUsers }],\n        [{ activeUsers }],\n        [{ totalMonitors }],\n        [{ activeMonitors }],\n        [{ todayRegistrations }],\n        [{ weeklyActiveUsers }]\n      ] = await Promise.all([\n        db.select({ totalUsers: count() }).from(users),\n        db.select({ activeUsers: count() }).from(users).where(eq(users.isActive, true)),\n        db.select({ totalMonitors: count() }).from(monitors),\n        db.select({ activeMonitors: count() }).from(monitors).where(eq(monitors.isActive, true)),\n        db.select({ todayRegistrations: count() }).from(users).where(gte(users.createdAt, today)),\n        db.select({ weeklyActiveUsers: count() }).from(users).where(gte(users.lastLoginAt, weekAgo))\n      ]);\n      const averageMonitorsPerUser = totalUsers > 0 ? totalMonitors / totalUsers : 0;\n      return {\n        totalUsers: totalUsers || 0,\n        activeUsers: activeUsers || 0,\n        totalMonitors: totalMonitors || 0,\n        activeMonitors: activeMonitors || 0,\n        todayRegistrations: todayRegistrations || 0,\n        weeklyActiveUsers: weeklyActiveUsers || 0,\n        averageMonitorsPerUser: Math.round(averageMonitorsPerUser * 100) / 100\n      };\n    } catch (error) {\n      console.error(\"Get system stats error:\", error);\n      throw new Error(\"Failed to retrieve system statistics\");\n    }\n  }\n  /**\n   * Get service health status\n   */\n  static async getServiceHealth() {\n    const results = {\n      database: false,\n      redis: false,\n      email: false,\n      monitoring: false,\n      lastChecked: /* @__PURE__ */ new Date()\n    };\n    try {\n      await db.select().from(users).limit(1);\n      results.database = true;\n    } catch {\n      results.database = false;\n    }\n    try {\n      const { redis } = await import(\"./connection.js\");\n      await redis.ping();\n      results.redis = true;\n    } catch {\n      results.redis = false;\n    }\n    try {\n      results.email = true;\n    } catch {\n      results.email = false;\n    }\n    try {\n      results.monitoring = true;\n    } catch {\n      results.monitoring = false;\n    }\n    return results;\n  }\n  /**\n   * Get system configuration\n   */\n  static async getSystemConfig() {\n    return {\n      maxMonitorsPerUser: 100,\n      maxAlertsPerHour: 50,\n      maintenanceMode: false,\n      registrationEnabled: true,\n      betaMode: false\n    };\n  }\n  /**\n   * Update system configuration\n   */\n  static async updateSystemConfig(config) {\n    console.log(\"System config update:\", config);\n  }\n  /**\n   * Get recent admin activity feed\n   */\n  static async getActivityFeed(limit = 50) {\n    return [\n      {\n        id: \"1\",\n        type: \"user_created\",\n        message: \"New user registered: john.doe@example.com\",\n        timestamp: new Date(Date.now() - 1e3 * 60 * 30),\n        // 30 minutes ago\n        targetUserId: \"user-123\"\n      },\n      {\n        id: \"2\",\n        type: \"config_updated\",\n        message: \"System configuration updated: Max monitors per user set to 100\",\n        timestamp: new Date(Date.now() - 1e3 * 60 * 60 * 2),\n        // 2 hours ago\n        adminUserId: \"admin-456\"\n      }\n    ];\n  }\n}\nexport {\n  AdminService as A\n};\n"],"names":[],"mappings":"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"}