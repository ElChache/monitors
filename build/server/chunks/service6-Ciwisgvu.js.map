{"version":3,"file":"service6-Ciwisgvu.js","sources":["../../../.svelte-kit/adapter-node/chunks/service6.js"],"sourcesContent":["import { db } from \"./db.js\";\nimport { m as monitors, u as users, h as userPreferences, s as sessions } from \"./users.js\";\nimport { count, eq, desc, and } from \"drizzle-orm\";\nimport \"./service2.js\";\nclass UserAccountService {\n  /**\n   * Get user profile with statistics\n   */\n  static async getUserProfile(userId) {\n    try {\n      const [userResult] = await db.select({\n        id: users.id,\n        email: users.email,\n        name: users.name,\n        emailVerified: users.emailVerified,\n        isBetaUser: users.isBetaUser,\n        isActive: users.isActive,\n        createdAt: users.createdAt,\n        lastLoginAt: users.lastLoginAt,\n        monitorCount: count(monitors.id)\n      }).from(users).leftJoin(monitors, eq(users.id, monitors.userId)).where(eq(users.id, userId)).groupBy(users.id);\n      if (!userResult) {\n        throw new Error(\"User not found\");\n      }\n      return {\n        id: userResult.id,\n        email: userResult.email,\n        name: userResult.name,\n        emailVerified: userResult.emailVerified,\n        isBetaUser: userResult.isBetaUser,\n        isActive: userResult.isActive,\n        createdAt: userResult.createdAt,\n        lastLoginAt: userResult.lastLoginAt,\n        monitorCount: userResult.monitorCount || 0\n      };\n    } catch (error) {\n      console.error(\"Get user profile error:\", error);\n      throw new Error(\"Failed to retrieve user profile\");\n    }\n  }\n  /**\n   * Update user profile information\n   */\n  static async updateUserProfile(userId, updates) {\n    try {\n      const updateData = {\n        updatedAt: /* @__PURE__ */ new Date()\n      };\n      if (updates.name !== void 0) {\n        updateData.name = updates.name;\n      }\n      if (updates.email !== void 0) {\n        updateData.email = updates.email;\n        updateData.emailVerified = false;\n      }\n      await db.update(users).set(updateData).where(eq(users.id, userId));\n    } catch (error) {\n      console.error(\"Update user profile error:\", error);\n      throw new Error(\"Failed to update user profile\");\n    }\n  }\n  /**\n   * Get user preferences\n   */\n  static async getUserPreferences(userId) {\n    try {\n      const [preferences] = await db.select().from(userPreferences).where(eq(userPreferences.userId, userId));\n      if (!preferences) {\n        return {\n          emailNotifications: true,\n          pushNotifications: false,\n          notificationFrequency: \"immediate\",\n          timezone: \"UTC\",\n          theme: \"light\",\n          language: \"en\"\n        };\n      }\n      return {\n        emailNotifications: preferences.emailNotifications,\n        pushNotifications: preferences.pushNotifications,\n        notificationFrequency: preferences.notificationFrequency,\n        timezone: preferences.timezone,\n        theme: preferences.theme,\n        language: preferences.language\n      };\n    } catch (error) {\n      console.error(\"Get user preferences error:\", error);\n      throw new Error(\"Failed to retrieve user preferences\");\n    }\n  }\n  /**\n   * Update user preferences\n   */\n  static async updateUserPreferences(userId, preferences) {\n    try {\n      const updateData = {\n        userId,\n        emailNotifications: preferences.emailNotifications ?? true,\n        pushNotifications: preferences.pushNotifications ?? false,\n        notificationFrequency: preferences.notificationFrequency ?? \"immediate\",\n        timezone: preferences.timezone ?? \"UTC\",\n        theme: preferences.theme ?? \"light\",\n        language: preferences.language ?? \"en\",\n        updatedAt: /* @__PURE__ */ new Date()\n      };\n      const existingPrefs = await db.select().from(userPreferences).where(eq(userPreferences.userId, userId));\n      if (existingPrefs.length > 0) {\n        await db.update(userPreferences).set(updateData).where(eq(userPreferences.userId, userId));\n      } else {\n        await db.insert(userPreferences).values({\n          ...updateData,\n          createdAt: /* @__PURE__ */ new Date()\n        });\n      }\n    } catch (error) {\n      console.error(\"Update user preferences error:\", error);\n      throw new Error(\"Failed to update user preferences\");\n    }\n  }\n  /**\n   * Get user sessions\n   */\n  static async getUserSessions(userId, currentSessionId) {\n    try {\n      const sessionResults = await db.select().from(sessions).where(eq(sessions.userId, userId)).orderBy(desc(sessions.lastActiveAt));\n      return sessionResults.map((session) => ({\n        id: session.id,\n        deviceInfo: session.deviceInfo || \"Unknown Device\",\n        ipAddress: session.ipAddress || \"Unknown IP\",\n        createdAt: session.createdAt,\n        lastActiveAt: session.lastActiveAt || session.createdAt,\n        isCurrentSession: session.id === currentSessionId\n      }));\n    } catch (error) {\n      console.error(\"Get user sessions error:\", error);\n      throw new Error(\"Failed to retrieve user sessions\");\n    }\n  }\n  /**\n   * Revoke user session\n   */\n  static async revokeUserSession(userId, sessionId) {\n    try {\n      await db.delete(sessions).where(and(\n        eq(sessions.userId, userId),\n        eq(sessions.id, sessionId)\n      ));\n    } catch (error) {\n      console.error(\"Revoke user session error:\", error);\n      throw new Error(\"Failed to revoke user session\");\n    }\n  }\n  /**\n   * Revoke all user sessions except current\n   */\n  static async revokeAllUserSessions(userId, currentSessionId) {\n    try {\n      const conditions = [eq(sessions.userId, userId)];\n      if (currentSessionId) {\n        conditions.push(eq(sessions.id, currentSessionId));\n      }\n      await db.delete(sessions).where(and(...conditions));\n    } catch (error) {\n      console.error(\"Revoke all user sessions error:\", error);\n      throw new Error(\"Failed to revoke user sessions\");\n    }\n  }\n  /**\n   * Get complete user account data for GDPR export\n   */\n  static async getUserAccountData(userId) {\n    try {\n      const [profile, preferences, sessionList] = await Promise.all([\n        this.getUserProfile(userId),\n        this.getUserPreferences(userId),\n        this.getUserSessions(userId)\n      ]);\n      const userMonitors = await db.select({\n        id: monitors.id,\n        name: monitors.name,\n        createdAt: monitors.createdAt,\n        isActive: monitors.isActive\n      }).from(monitors).where(eq(monitors.userId, userId)).orderBy(desc(monitors.createdAt));\n      const now = /* @__PURE__ */ new Date();\n      const accountAge = Math.floor(\n        (now.getTime() - profile.createdAt.getTime()) / (1e3 * 60 * 60 * 24)\n      );\n      const activeMonitors = userMonitors.filter((m) => m.isActive).length;\n      return {\n        profile,\n        preferences,\n        sessions: sessionList,\n        monitors: userMonitors,\n        statistics: {\n          totalMonitors: userMonitors.length,\n          activeMonitors,\n          totalEvaluations: 0,\n          // Would need to query monitor evaluations\n          accountAge\n        }\n      };\n    } catch (error) {\n      console.error(\"Get user account data error:\", error);\n      throw new Error(\"Failed to retrieve user account data\");\n    }\n  }\n  /**\n   * Delete user account and all associated data\n   */\n  static async deleteUserAccount(userId) {\n    try {\n      await db.delete(monitors).where(eq(monitors.userId, userId));\n      await db.delete(sessions).where(eq(sessions.userId, userId));\n      await db.delete(userPreferences).where(eq(userPreferences.userId, userId));\n      await db.delete(users).where(eq(users.id, userId));\n    } catch (error) {\n      console.error(\"Delete user account error:\", error);\n      throw new Error(\"Failed to delete user account\");\n    }\n  }\n  /**\n   * Change user password\n   */\n  static async changePassword(userId, currentPassword, newPassword) {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, userId));\n      if (!user || !user.passwordHash) {\n        throw new Error(\"User not found or using OAuth authentication\");\n      }\n      const { PasswordService } = await import(\"./service2.js\").then((n) => n.p);\n      const isCurrentPasswordValid = await PasswordService.verifyPassword(\n        currentPassword,\n        user.passwordHash\n      );\n      if (!isCurrentPasswordValid) {\n        throw new Error(\"Current password is incorrect\");\n      }\n      const newPasswordHash = await PasswordService.hashPassword(newPassword);\n      await db.update(users).set({\n        passwordHash: newPasswordHash,\n        updatedAt: /* @__PURE__ */ new Date()\n      }).where(eq(users.id, userId));\n      await this.revokeAllUserSessions(userId);\n    } catch (error) {\n      console.error(\"Change password error:\", error);\n      throw new Error(error instanceof Error ? error.message : \"Failed to change password\");\n    }\n  }\n}\nexport {\n  UserAccountService as U\n};\n"],"names":[],"mappings":"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"}