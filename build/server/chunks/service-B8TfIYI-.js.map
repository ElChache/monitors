{"version":3,"file":"service-B8TfIYI-.js","sources":["../../../.svelte-kit/adapter-node/chunks/service.js"],"sourcesContent":["import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\nimport { config } from \"dotenv\";\nimport { n as notificationSchema, m as monitorSchema, u as userSchema, a as users, b as userPreferences, e as emailVerificationTokens, s as sessions, p as passwordResetTokens } from \"./users.js\";\nimport { J as JWTService } from \"./jwt.js\";\nimport bcrypt from \"@node-rs/bcrypt\";\nimport { z } from \"zod\";\nimport { eq, and, gt } from \"drizzle-orm\";\nconfig();\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL || \"postgresql://postgres:password@localhost:8081/monitors_be_primary_001_23f6\",\n  max: 10,\n  // Maximum number of connections in pool\n  idleTimeoutMillis: 3e4,\n  // Close idle connections after 30 seconds\n  connectionTimeoutMillis: 2e3\n  // Timeout after 2 seconds\n});\npool.on(\"error\", (err) => {\n  console.error(\"Unexpected database pool error:\", err);\n});\nconst db = drizzle(pool, {\n  schema: {\n    ...userSchema,\n    ...monitorSchema,\n    ...notificationSchema\n  }\n});\nprocess.on(\"SIGINT\", async () => {\n  await pool.end();\n  process.exit(0);\n});\nprocess.on(\"SIGTERM\", async () => {\n  await pool.end();\n  process.exit(0);\n});\nconst PasswordSchema = z.string().min(8, \"Password must be at least 8 characters long\").max(100, \"Password must be less than 100 characters\").refine(\n  (password) => /[A-Z]/.test(password),\n  \"Password must contain at least one uppercase letter\"\n).refine(\n  (password) => /[a-z]/.test(password),\n  \"Password must contain at least one lowercase letter\"\n).refine(\n  (password) => /\\d/.test(password),\n  \"Password must contain at least one number\"\n).refine(\n  (password) => /[!@#$%^&*(),.?\":{}|<>]/.test(password),\n  \"Password must contain at least one special character\"\n);\nclass PasswordService {\n  static SALT_ROUNDS = 12;\n  static async hash(password) {\n    try {\n      return await bcrypt.hash(password, this.SALT_ROUNDS);\n    } catch (error) {\n      console.error(\"Password hashing failed:\", error);\n      throw new Error(\"Failed to hash password\");\n    }\n  }\n  static async verify(password, hashedPassword) {\n    try {\n      return await bcrypt.verify(password, hashedPassword);\n    } catch (error) {\n      console.error(\"Password verification failed:\", error);\n      return false;\n    }\n  }\n  static checkStrength(password) {\n    let score = 0;\n    const feedback = [];\n    if (password.length >= 8) {\n      score += 1;\n    } else {\n      feedback.push(\"Use at least 8 characters\");\n    }\n    if (/[a-z]/.test(password)) score += 1;\n    else feedback.push(\"Add lowercase letters\");\n    if (/[A-Z]/.test(password)) score += 1;\n    else feedback.push(\"Add uppercase letters\");\n    if (/\\d/.test(password)) score += 1;\n    else feedback.push(\"Add numbers\");\n    if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) score += 1;\n    else feedback.push(\"Add special characters\");\n    if (password.length >= 12) score += 1;\n    if (password.length >= 16) score += 1;\n    if (/(.)\\1{2,}/.test(password)) {\n      score = Math.max(0, score - 1);\n      feedback.push(\"Avoid repeated characters\");\n    }\n    if (/123456|password|qwerty|admin/i.test(password)) {\n      score = Math.max(0, score - 2);\n      feedback.push(\"Avoid common patterns\");\n    }\n    score = Math.min(4, score);\n    const strengthLabels = [\"Very Weak\", \"Weak\", \"Fair\", \"Good\", \"Excellent\"];\n    const strengthLabel = strengthLabels[score] || \"Very Weak\";\n    return {\n      score,\n      feedback: feedback.length > 0 ? feedback : [`Password strength: ${strengthLabel}`],\n      isValid: score >= 3\n      // Require at least \"Good\" strength\n    };\n  }\n  static validate(password) {\n    const result = PasswordSchema.safeParse(password);\n    if (result.success) {\n      const strength = this.checkStrength(password);\n      if (strength.isValid) {\n        return { isValid: true, errors: [] };\n      } else {\n        return {\n          isValid: false,\n          errors: [\"Password is not strong enough\", ...strength.feedback]\n        };\n      }\n    } else {\n      return {\n        isValid: false,\n        errors: result.error.errors.map((err) => err.message)\n      };\n    }\n  }\n  static generateSecureToken(length = 32) {\n    const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let token = \"\";\n    for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * charset.length);\n      token += charset[randomIndex];\n    }\n    return token;\n  }\n}\nconst RegisterSchema = z.object({\n  email: z.string().email(\"Invalid email address\").max(255),\n  name: z.string().min(1, \"Name is required\").max(100),\n  password: z.string().min(1, \"Password is required\")\n});\nconst LoginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\")\n});\nconst ResetPasswordSchema = z.object({\n  token: z.string().min(1, \"Reset token is required\"),\n  newPassword: z.string().min(1, \"New password is required\")\n});\nclass AuthService {\n  static async register(data) {\n    const validation = RegisterSchema.safeParse(data);\n    if (!validation.success) {\n      return {\n        success: false,\n        error: \"Validation failed\",\n        errors: validation.error.errors.map((err) => err.message)\n      };\n    }\n    const { email, name, password } = validation.data;\n    const passwordValidation = PasswordService.validate(password);\n    if (!passwordValidation.isValid) {\n      return {\n        success: false,\n        error: \"Password validation failed\",\n        errors: passwordValidation.errors\n      };\n    }\n    try {\n      const existingUser = await db.select().from(users).where(eq(users.email, email));\n      if (existingUser.length > 0) {\n        return {\n          success: false,\n          error: \"User already exists with this email\"\n        };\n      }\n      const passwordHash = await PasswordService.hash(password);\n      const [newUser] = await db.insert(users).values({\n        email,\n        name,\n        passwordHash,\n        emailVerified: false,\n        // Will be verified via email\n        isBetaUser: false\n      }).returning();\n      await db.insert(userPreferences).values({\n        userId: newUser.id,\n        emailNotifications: true,\n        timezone: \"UTC\"\n      });\n      const verificationToken = PasswordService.generateSecureToken(32);\n      const verificationExpiry = new Date(Date.now() + 24 * 60 * 60 * 1e3);\n      await db.insert(emailVerificationTokens).values({\n        userId: newUser.id,\n        token: verificationToken,\n        email: newUser.email,\n        expiresAt: verificationExpiry\n      });\n      const tokens = JWTService.generateTokenPair({\n        id: newUser.id,\n        email: newUser.email,\n        name: newUser.name\n      });\n      const [session] = await db.insert(sessions).values({\n        userId: newUser.id,\n        sessionToken: tokens.accessToken,\n        refreshToken: tokens.refreshToken,\n        expiresAt: tokens.expiresAt,\n        refreshExpiresAt: tokens.refreshExpiresAt\n      }).returning();\n      const userResult = {\n        id: newUser.id,\n        email: newUser.email,\n        name: newUser.name,\n        emailVerified: newUser.emailVerified,\n        isBetaUser: newUser.isBetaUser,\n        createdAt: newUser.createdAt\n      };\n      return {\n        success: true,\n        user: userResult,\n        tokens,\n        session: {\n          id: session.id,\n          expiresAt: session.expiresAt\n        }\n      };\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      return {\n        success: false,\n        error: \"Registration failed. Please try again.\"\n      };\n    }\n  }\n  static async login(data) {\n    const validation = LoginSchema.safeParse(data);\n    if (!validation.success) {\n      return {\n        success: false,\n        error: \"Invalid email or password\"\n      };\n    }\n    const { email, password } = validation.data;\n    try {\n      const [user] = await db.select().from(users).where(eq(users.email, email));\n      if (!user || !user.passwordHash) {\n        return {\n          success: false,\n          error: \"Invalid email or password\"\n        };\n      }\n      const isValidPassword = await PasswordService.verify(password, user.passwordHash);\n      if (!isValidPassword) {\n        return {\n          success: false,\n          error: \"Invalid email or password\"\n        };\n      }\n      await db.update(users).set({ lastLoginAt: /* @__PURE__ */ new Date() }).where(eq(users.id, user.id));\n      const tokens = JWTService.generateTokenPair({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n      const [session] = await db.insert(sessions).values({\n        userId: user.id,\n        sessionToken: tokens.accessToken,\n        refreshToken: tokens.refreshToken,\n        expiresAt: tokens.expiresAt,\n        refreshExpiresAt: tokens.refreshExpiresAt\n      }).returning();\n      const userResult = {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        emailVerified: user.emailVerified,\n        isBetaUser: user.isBetaUser,\n        createdAt: user.createdAt\n      };\n      return {\n        success: true,\n        user: userResult,\n        tokens,\n        session: {\n          id: session.id,\n          expiresAt: session.expiresAt\n        }\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return {\n        success: false,\n        error: \"Login failed. Please try again.\"\n      };\n    }\n  }\n  static async logout(sessionToken) {\n    try {\n      await db.delete(sessions).where(eq(sessions.sessionToken, sessionToken));\n      return { success: true };\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      return { success: false, error: \"Logout failed\" };\n    }\n  }\n  static async refreshTokens(refreshToken) {\n    try {\n      const payload = JWTService.verifyRefreshToken(refreshToken);\n      if (!payload) {\n        return { success: false, error: \"Invalid refresh token\" };\n      }\n      const [session] = await db.select().from(sessions).where(and(\n        eq(sessions.refreshToken, refreshToken),\n        gt(sessions.refreshExpiresAt, /* @__PURE__ */ new Date())\n      ));\n      if (!session) {\n        return { success: false, error: \"Session expired or invalid\" };\n      }\n      const [user] = await db.select().from(users).where(eq(users.id, session.userId));\n      if (!user) {\n        return { success: false, error: \"User not found\" };\n      }\n      const tokens = JWTService.generateTokenPair({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n      await db.update(sessions).set({\n        sessionToken: tokens.accessToken,\n        refreshToken: tokens.refreshToken,\n        expiresAt: tokens.expiresAt,\n        refreshExpiresAt: tokens.refreshExpiresAt,\n        lastUsedAt: /* @__PURE__ */ new Date()\n      }).where(eq(sessions.id, session.id));\n      const userResult = {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        emailVerified: user.emailVerified,\n        isBetaUser: user.isBetaUser,\n        createdAt: user.createdAt\n      };\n      return {\n        success: true,\n        user: userResult,\n        tokens,\n        session: {\n          id: session.id,\n          expiresAt: tokens.expiresAt\n        }\n      };\n    } catch (error) {\n      console.error(\"Token refresh error:\", error);\n      return { success: false, error: \"Token refresh failed\" };\n    }\n  }\n  static async requestPasswordReset(email) {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.email, email));\n      if (!user) {\n        return { success: true };\n      }\n      await db.update(passwordResetTokens).set({ isUsed: true }).where(and(eq(passwordResetTokens.userId, user.id), eq(passwordResetTokens.isUsed, false)));\n      const resetToken = PasswordService.generateSecureToken(32);\n      const resetExpiry = new Date(Date.now() + 60 * 60 * 1e3);\n      await db.insert(passwordResetTokens).values({\n        userId: user.id,\n        token: resetToken,\n        expiresAt: resetExpiry\n      });\n      console.log(`Password reset token for ${email}: ${resetToken}`);\n      return { success: true };\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      return { success: false, error: \"Password reset request failed\" };\n    }\n  }\n  static async resetPassword(data) {\n    const validation = ResetPasswordSchema.safeParse(data);\n    if (!validation.success) {\n      return {\n        success: false,\n        error: \"Invalid request data\"\n      };\n    }\n    const { token, newPassword } = validation.data;\n    const passwordValidation = PasswordService.validate(newPassword);\n    if (!passwordValidation.isValid) {\n      return {\n        success: false,\n        error: \"Password validation failed\",\n        errors: passwordValidation.errors\n      };\n    }\n    try {\n      const [resetToken] = await db.select().from(passwordResetTokens).where(and(\n        eq(passwordResetTokens.token, token),\n        eq(passwordResetTokens.isUsed, false),\n        gt(passwordResetTokens.expiresAt, /* @__PURE__ */ new Date())\n      ));\n      if (!resetToken) {\n        return { success: false, error: \"Invalid or expired reset token\" };\n      }\n      const passwordHash = await PasswordService.hash(newPassword);\n      await db.update(users).set({ passwordHash }).where(eq(users.id, resetToken.userId));\n      await db.update(passwordResetTokens).set({ isUsed: true }).where(eq(passwordResetTokens.id, resetToken.id));\n      await db.delete(sessions).where(eq(sessions.userId, resetToken.userId));\n      return { success: true };\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      return { success: false, error: \"Password reset failed\" };\n    }\n  }\n  static async verifyEmail(token) {\n    try {\n      const [verificationToken] = await db.select().from(emailVerificationTokens).where(and(\n        eq(emailVerificationTokens.token, token),\n        eq(emailVerificationTokens.isUsed, false),\n        gt(emailVerificationTokens.expiresAt, /* @__PURE__ */ new Date())\n      ));\n      if (!verificationToken) {\n        return { success: false, error: \"Invalid or expired verification token\" };\n      }\n      await db.update(users).set({ emailVerified: true }).where(eq(users.id, verificationToken.userId));\n      await db.update(emailVerificationTokens).set({ isUsed: true }).where(eq(emailVerificationTokens.id, verificationToken.id));\n      return { success: true };\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      return { success: false, error: \"Email verification failed\" };\n    }\n  }\n  static async getCurrentUser(sessionToken) {\n    try {\n      const payload = JWTService.verifyAccessToken(sessionToken);\n      if (!payload) return null;\n      const [user] = await db.select().from(users).where(eq(users.id, payload.userId));\n      if (!user) return null;\n      return {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        emailVerified: user.emailVerified,\n        isBetaUser: user.isBetaUser,\n        createdAt: user.createdAt\n      };\n    } catch (error) {\n      console.error(\"Get current user error:\", error);\n      return null;\n    }\n  }\n}\nexport {\n  AuthService as A\n};\n"],"names":[],"mappings":"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"}