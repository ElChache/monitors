{"version":3,"file":"monitor_service-TdkLdvPq.js","sources":["../../../.svelte-kit/adapter-node/chunks/monitor_service.js"],"sourcesContent":["import { eq, desc } from \"drizzle-orm\";\nimport { db } from \"./connection.js\";\nimport { m as monitors, j as monitorFacts, g as factHistory } from \"./users.js\";\nimport { c as classifyPrompt, M as MonitorEvaluationService } from \"./evaluation_service.js\";\nimport \"./db.js\";\nimport \"puppeteer\";\nimport \"./service4.js\";\nclass MonitorJobQueue {\n  static initialized = false;\n  static jobs = /* @__PURE__ */ new Map();\n  /**\n   * Initialize the job queue (simplified version)\n   */\n  static async initialize() {\n    if (this.initialized) return;\n    try {\n      this.initialized = true;\n      console.log(\"Simplified monitor job queue initialized\");\n    } catch (error) {\n      console.error(\"Failed to initialize monitor job queue:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Add monitor evaluation job to queue (simplified version)\n   */\n  static async addEvaluationJob(monitorId, userId, options = {}) {\n    await this.initialize();\n    const jobId = `monitor-${monitorId}-${Date.now()}`;\n    const job = {\n      monitorId,\n      userId,\n      scheduled: options.scheduled || false,\n      priority: options.priority || 0\n    };\n    this.jobs.set(jobId, job);\n    if (options.scheduled === false) {\n      setTimeout(() => this.executeJob(jobId), options.delay || 0);\n    }\n    console.log(`Added evaluation job for monitor ${monitorId}, job ID: ${jobId}`);\n    return jobId;\n  }\n  /**\n   * Schedule recurring evaluation for a monitor (simplified version)\n   */\n  static async scheduleRecurringEvaluation(monitorId, userId, frequencyMinutes) {\n    await this.initialize();\n    const intervalKey = `recurring-${monitorId}`;\n    console.log(`Scheduled recurring evaluation for monitor ${monitorId} every ${frequencyMinutes} minutes`);\n    return intervalKey;\n  }\n  /**\n   * Remove recurring evaluation for a monitor\n   */\n  static async removeRecurringEvaluation(monitorId) {\n    console.log(`Removed recurring evaluation for monitor ${monitorId}`);\n  }\n  /**\n   * Execute a job immediately (simplified version)\n   */\n  static async executeJob(jobId) {\n    const job = this.jobs.get(jobId);\n    if (!job) return;\n    try {\n      console.log(`Executing monitor evaluation: ${job.monitorId} (job: ${jobId})`);\n      console.log(`Monitor evaluation completed successfully for ${job.monitorId}`);\n    } catch (error) {\n      console.error(`Job ${jobId} failed:`, error);\n    } finally {\n      this.jobs.delete(jobId);\n    }\n  }\n  /**\n   * Shutdown the job queue\n   */\n  static async shutdown() {\n    this.initialized = false;\n    this.jobs.clear();\n    console.log(\"Simplified monitor job queue shut down\");\n  }\n}\nclass MonitorService {\n  /**\n   * Create a new monitor with AI-enhanced configuration\n   */\n  static async createMonitor(userId, data) {\n    try {\n      let monitorConfig = data;\n      if (!data.type || !data.extractedFact || !data.triggerCondition || !data.factType) {\n        console.log(`Using AI to classify monitor prompt: \"${data.prompt}\"`);\n        try {\n          const classification = await classifyPrompt(data.prompt);\n          monitorConfig = {\n            ...data,\n            type: data.type || classification.monitorType,\n            extractedFact: data.extractedFact || classification.extractedFact,\n            triggerCondition: data.triggerCondition || classification.triggerCondition,\n            factType: data.factType || classification.factType,\n            checkFrequency: data.checkFrequency || classification.recommendedFrequency\n          };\n          console.log(`AI classification complete:`, {\n            type: monitorConfig.type,\n            factType: monitorConfig.factType,\n            frequency: monitorConfig.checkFrequency,\n            confidence: classification.confidence\n          });\n        } catch (aiError) {\n          console.warn(\"AI classification failed, using defaults:\", aiError);\n          monitorConfig = {\n            ...data,\n            type: data.type || \"state\",\n            extractedFact: data.extractedFact || \"Extract value from the content\",\n            triggerCondition: data.triggerCondition || \"Monitor for changes\",\n            factType: data.factType || \"string\"\n          };\n        }\n      }\n      const monitor = await db.insert(monitors).values({\n        userId,\n        name: monitorConfig.name,\n        prompt: monitorConfig.prompt,\n        type: monitorConfig.type,\n        extractedFact: monitorConfig.extractedFact,\n        triggerCondition: monitorConfig.triggerCondition,\n        factType: monitorConfig.factType,\n        checkFrequency: monitorConfig.checkFrequency || 60,\n        isActive: true,\n        evaluationCount: 0,\n        triggerCount: 0,\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date()\n      }).returning();\n      const createdMonitor = monitor[0];\n      await MonitorJobQueue.scheduleRecurringEvaluation(\n        createdMonitor.id,\n        userId,\n        monitorConfig.checkFrequency || 60\n      );\n      await MonitorJobQueue.addEvaluationJob(createdMonitor.id, userId, {\n        scheduled: false,\n        priority: 10\n        // High priority for initial evaluation\n      });\n      console.log(`Created AI-enhanced monitor ${createdMonitor.id} with initial evaluation scheduled`);\n      return createdMonitor;\n    } catch (error) {\n      console.error(\"Failed to create monitor:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Update an existing monitor\n   */\n  static async updateMonitor(monitorId, userId, data) {\n    try {\n      const updated = await db.update(monitors).set({\n        ...data,\n        updatedAt: /* @__PURE__ */ new Date()\n      }).where(eq(monitors.id, monitorId)).returning();\n      if (updated.length === 0) {\n        throw new Error(\"Monitor not found\");\n      }\n      const monitor = updated[0];\n      if (data.checkFrequency !== void 0) {\n        await MonitorJobQueue.scheduleRecurringEvaluation(\n          monitorId,\n          userId,\n          data.checkFrequency\n        );\n      }\n      if (data.isActive === false) {\n        await MonitorJobQueue.removeRecurringEvaluation(monitorId);\n      } else if (data.isActive === true) {\n        await MonitorJobQueue.scheduleRecurringEvaluation(\n          monitorId,\n          userId,\n          monitor.checkFrequency\n        );\n      }\n      console.log(`Updated monitor ${monitorId}`);\n      return monitor;\n    } catch (error) {\n      console.error(\"Failed to update monitor:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Delete a monitor and stop its evaluations\n   */\n  static async deleteMonitor(monitorId, userId) {\n    try {\n      await MonitorJobQueue.removeRecurringEvaluation(monitorId);\n      const result = await db.delete(monitors).where(eq(monitors.id, monitorId)).returning();\n      if (result.length === 0) {\n        throw new Error(\"Monitor not found\");\n      }\n      console.log(`Deleted monitor ${monitorId} and stopped evaluations`);\n      return true;\n    } catch (error) {\n      console.error(\"Failed to delete monitor:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Get monitor by ID with latest facts\n   */\n  static async getMonitor(monitorId, userId) {\n    try {\n      const monitorResult = await db.select().from(monitors).where(eq(monitors.id, monitorId)).limit(1);\n      if (monitorResult.length === 0) {\n        return null;\n      }\n      const monitor = monitorResult[0];\n      const latestFacts = await db.select().from(monitorFacts).where(eq(monitorFacts.monitorId, monitorId)).orderBy(desc(monitorFacts.extractedAt)).limit(10);\n      return {\n        ...monitor,\n        latestFacts\n      };\n    } catch (error) {\n      console.error(\"Failed to get monitor:\", error);\n      return null;\n    }\n  }\n  /**\n   * Get all monitors for a user\n   */\n  static async getUserMonitors(userId) {\n    try {\n      const userMonitors = await db.select().from(monitors).where(eq(monitors.userId, userId)).orderBy(desc(monitors.createdAt));\n      const monitorsWithFacts = await Promise.all(\n        userMonitors.map(async (monitor) => {\n          const latestFacts = await db.select().from(monitorFacts).where(eq(monitorFacts.monitorId, monitor.id)).orderBy(desc(monitorFacts.extractedAt)).limit(3);\n          return {\n            ...monitor,\n            latestFacts\n          };\n        })\n      );\n      return monitorsWithFacts;\n    } catch (error) {\n      console.error(\"Failed to get user monitors:\", error);\n      return [];\n    }\n  }\n  /**\n   * Manually trigger monitor evaluation (rate limited)\n   */\n  static async triggerManualEvaluation(monitorId, userId) {\n    try {\n      const monitor = await db.select().from(monitors).where(eq(monitors.id, monitorId)).limit(1);\n      if (monitor.length === 0) {\n        return {\n          success: false,\n          error: \"Monitor not found\"\n        };\n      }\n      if (!monitor[0].isActive) {\n        return {\n          success: false,\n          error: \"Monitor is not active\"\n        };\n      }\n      const jobId = await MonitorJobQueue.addEvaluationJob(monitorId, userId, {\n        scheduled: false,\n        priority: 20\n        // Very high priority for manual triggers\n      });\n      console.log(`Manual evaluation triggered for monitor ${monitorId}, job: ${jobId}`);\n      return {\n        success: true,\n        jobId\n      };\n    } catch (error) {\n      console.error(\"Failed to trigger manual evaluation:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      };\n    }\n  }\n  /**\n   * Get monitor statistics and insights\n   */\n  static async getMonitorStats(monitorId) {\n    try {\n      const monitor = await db.select().from(monitors).where(eq(monitors.id, monitorId)).limit(1);\n      if (monitor.length === 0) {\n        throw new Error(\"Monitor not found\");\n      }\n      const m = monitor[0];\n      const recentFacts = await db.select().from(monitorFacts).where(eq(monitorFacts.monitorId, monitorId)).orderBy(desc(monitorFacts.extractedAt)).limit(100);\n      const totalEvaluations = m.evaluationCount;\n      const totalTriggers = m.triggerCount;\n      const successRate = totalEvaluations > 0 ? (totalEvaluations - recentFacts.filter((f) => f.value === null).length) / totalEvaluations * 100 : 0;\n      const avgProcessingTime = recentFacts.length > 0 ? recentFacts.reduce((sum, fact) => sum + (fact.processingTime || 0), 0) / recentFacts.length : 0;\n      const lastEvaluation = m.lastChecked;\n      const recentTriggers = recentFacts.filter((f) => f.triggeredAlert && f.extractedAt > new Date(Date.now() - 24 * 60 * 60 * 1e3)).length;\n      return {\n        totalEvaluations,\n        totalTriggers,\n        successRate: Math.round(successRate * 100) / 100,\n        avgProcessingTime: Math.round(avgProcessingTime),\n        lastEvaluation,\n        recentTriggers\n      };\n    } catch (error) {\n      console.error(\"Failed to get monitor stats:\", error);\n      return {\n        totalEvaluations: 0,\n        totalTriggers: 0,\n        successRate: 0,\n        avgProcessingTime: 0,\n        recentTriggers: 0\n      };\n    }\n  }\n  /**\n   * Get monitor history data for charts\n   */\n  static async getMonitorHistory(monitorId, timeRange, aggregation = \"raw\") {\n    try {\n      const history = await db.select().from(factHistory).where(eq(factHistory.monitorId, monitorId)).orderBy(desc(factHistory.timestamp)).limit(1e3);\n      const filtered = history.filter(\n        (record) => record.timestamp >= timeRange.start && record.timestamp <= timeRange.end\n      );\n      if (aggregation === \"raw\") {\n        return filtered.map((record) => ({\n          timestamp: record.timestamp,\n          value: record.value,\n          triggered: record.triggeredAlert\n        }));\n      }\n      return filtered.map((record) => ({\n        timestamp: record.timestamp,\n        value: record.value,\n        triggered: record.triggeredAlert\n      }));\n    } catch (error) {\n      console.error(\"Failed to get monitor history:\", error);\n      return [];\n    }\n  }\n  /**\n   * Test monitor configuration without saving\n   */\n  static async testMonitor(userId, data) {\n    try {\n      console.log(`Testing monitor configuration for user ${userId}`);\n      const testMonitor = {\n        id: \"test-monitor\",\n        userId,\n        ...data,\n        currentValue: null,\n        previousValue: null,\n        isActive: true,\n        evaluationCount: 0,\n        triggerCount: 0,\n        lastChecked: null,\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date()\n      };\n      const result = await MonitorEvaluationService.evaluateMonitor(\"test-monitor\");\n      return {\n        success: result.success,\n        extractedValue: result.value,\n        error: result.error,\n        processingTime: result.processingTime\n      };\n    } catch (error) {\n      console.error(\"Failed to test monitor:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      };\n    }\n  }\n  /**\n   * Initialize monitor service and job queue\n   */\n  static async initialize() {\n    try {\n      await MonitorJobQueue.initialize();\n      console.log(\"Monitor service initialized\");\n    } catch (error) {\n      console.error(\"Failed to initialize monitor service:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Cleanup service resources\n   */\n  static async shutdown() {\n    try {\n      await MonitorJobQueue.shutdown();\n      console.log(\"Monitor service shut down\");\n    } catch (error) {\n      console.error(\"Failed to shutdown monitor service:\", error);\n    }\n  }\n}\nexport {\n  MonitorService as M\n};\n"],"names":[],"mappings":"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"}